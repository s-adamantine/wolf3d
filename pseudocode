tracing the cast ray until it hits a wall

//finding the directional slope_x and slope_y
//dir_y = cur.y < cam.y ? + : -;
//dir_x = cur.x > cam.x ? + : -;

funct	raycast()
{
	ray_angle = planecenter - fov/2;
	xinc = y_height / tan(fov/2);
	yinc = dir_y >= 0 ? -y_height : y_height;
	for (r = 0; r < x_total; r++)
	{
		h_dist = find_wall(x, xinc);
		y_dist = find_wall(y, yinc);
		ray_angle += fov/x_total;
	}
}

first_intersection(x)
{
	A.y = (dir_y > 0 ? ((int)cam.y / size_grid * size_grid) - 1 : ((int) cam.y / size_grid * size_grid) + size_grid;
	A.x = cam.x + (cam.y - A.y) / tan(fov);
}

first_intersection(y)
{
	B.x = (dir_x > 0 ? ((int)cam.x / size_grid) * (size_grid) + size_grid : ((int)cam.x / size_grid * size_grid - 1;
	//this one isn't finished!
}

//will be a little confusing if you don't specify whether it's an x or a y
find_wall(cur.x, inc)
{
	while (e->wall[cur.x]) == 0)
		cur.x = cur.x + xinc;
	return (v3dist(cur.x));
}
